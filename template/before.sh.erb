# This script (`before.sh.erb`) is sourced directly into the main Bash script
# that is run when the batch job starts up. It is called before the `script.sh`
# is forked off into a separate process.
#
# There are some helpful Bash functions that are made available to this script
# that encapsulate commonly used routines when initializing a web server:
#
#   - find_port
#       Find available port in range [$1..$2]
#       Default: 2000 65535
#
#   - create_passwd
#       Generate random alphanumeric password with $1 characters
#       Default: 32
#
# We **MUST** supply the following environment variables in this
# `before.sh.erb` script so that a user can connect back to the web server when
# it is running (case-sensitive variable names):
#
#   - $host (already defined earlier, so no need to define again)
#       The host that the web server is listening on
#
#   - $port
#       The port that the web server is listening on
#
#   - $password
#       The plain text password used to authenticate to the web server with

# Export the module function if it exists
[[ $(type -t module) == "function" ]] && export -f module

# Find available port to run server on
port=$(find_port)

# Generate SHA1 encrypted password (requires OpenSSL installed)
SALT="$(create_passwd 16)"
password="$(create_passwd 16)"
PASSWORD_SHA1="$(echo -n "${password}${SALT}" | openssl dgst -sha1 | awk '{print $NF}')"

# The `$SERVER_CONFIG` and `$SERVER_SCRIPT` environment variables are exported as they
# are used in the main `script.sh.erb` file when launching the Hello World server.
export SERVER_CONFIG="${PWD}/hello.json"
export SERVER_SCRIPT="${PWD}/server.py"

# Generate a simple JSON configuration file with secure file permissions
(
umask 077
cat > "${SERVER_CONFIG}" << EOL
{
  "port": ${port},
  "host": "${host}",
  "sha1": "${PASSWORD_SHA1}",
  "salt": "${SALT}",
  "message": "<%= context.special_message %>"
}
EOL
)
